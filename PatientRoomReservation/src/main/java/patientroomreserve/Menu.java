/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package patientroomreserve;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import static patientroomreserve.Main.db;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static patientroomreserve.Start.con;

/**
 *
 * @author 90554
 */
public class Menu extends javax.swing.JFrame {

    public Menu() {
        initComponents();
        for (int i = 1950; i <= 2023; i++) {
            comboBirthYear.addItem(i + "");
        }
        updatePatientList();
        updateRoomPatientList();
        try {
            con = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
            System.out.println("connected");
        } catch (SQLException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Menu(String message) {
        initComponents();
        jLabel1.setText("Hello " + message);
        for (int i = 1950; i <= 2023; i++) {
            comboBirthYear.addItem(i + "");
        }
        updatePatientList();
        updateRoomPatientList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        addPatientBttn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPatientFirstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPatientLastName = new javax.swing.JTextField();
        radioBloodTypeAB = new javax.swing.JRadioButton();
        radioBloodTypeA = new javax.swing.JRadioButton();
        radioBloodTypeB = new javax.swing.JRadioButton();
        radioBloodTypeO = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        checkFemale = new javax.swing.JCheckBox();
        checkMale = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        comboDoctor = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboNurse = new javax.swing.JComboBox<>();
        lblAddPatient = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPatientList = new javax.swing.JList<>();
        showPatientInformationBttn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtRemoveID = new javax.swing.JTextField();
        removePatientBttn = new javax.swing.JButton();
        lblRemovePatient = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        comboBirthDay = new javax.swing.JComboBox<>();
        comboBirthMonth = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtDoctorNurseFirstName = new javax.swing.JTextField();
        txtDoctorNurseLastName = new javax.swing.JTextField();
        addDoctorBttn = new javax.swing.JButton();
        addNurseBttn = new javax.swing.JButton();
        removeDoctorBttn = new javax.swing.JButton();
        removeNurseBttn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRoomPatient = new javax.swing.JTable();
        lblRoomPatient = new javax.swing.JLabel();
        lblDoctorNurse = new javax.swing.JLabel();
        comboBirthYear = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        selectPatientRoomTableBttn = new javax.swing.JButton();
        txtSelectId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        logOutBttn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addPatientBttn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addPatientBttn.setText("ADD PATIENT");
        addPatientBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientBttnActionPerformed(evt);
            }
        });

        txtPatientFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientFirstNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Gender");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("First Name");

        buttonGroup2.add(radioBloodTypeAB);
        radioBloodTypeAB.setText("AB");

        buttonGroup2.add(radioBloodTypeA);
        radioBloodTypeA.setText("A");

        buttonGroup2.add(radioBloodTypeB);
        radioBloodTypeB.setText("B");

        buttonGroup2.add(radioBloodTypeO);
        radioBloodTypeO.setText("0");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Blood Type");

        buttonGroup1.add(checkFemale);
        checkFemale.setText("Female");
        checkFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFemaleActionPerformed(evt);
            }
        });

        buttonGroup1.add(checkMale);
        checkMale.setText("Male");
        checkMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMaleActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("ID");

        comboDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDoctorActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Doctor");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Last Name");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Nurse");

        jScrollPane1.setViewportView(listPatientList);

        showPatientInformationBttn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        showPatientInformationBttn.setText("SHOW INFORMATION");
        showPatientInformationBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPatientInformationBttnActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Patient Information");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("ID");

        txtRemoveID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRemoveIDActionPerformed(evt);
            }
        });

        removePatientBttn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        removePatientBttn.setText("REMOVE PATIENT");
        removePatientBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePatientBttnActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Birthdate");

        comboBirthDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        comboBirthMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("First Name");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Last Name");

        txtDoctorNurseFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorNurseFirstNameActionPerformed(evt);
            }
        });

        addDoctorBttn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addDoctorBttn.setText("Add Doctor");
        addDoctorBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorBttnActionPerformed(evt);
            }
        });

        addNurseBttn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addNurseBttn.setText("Add Nurse");
        addNurseBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNurseBttnActionPerformed(evt);
            }
        });

        removeDoctorBttn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        removeDoctorBttn.setText("Remove Doctor");
        removeDoctorBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDoctorBttnActionPerformed(evt);
            }
        });

        removeNurseBttn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        removeNurseBttn.setText("Remove Nurse");
        removeNurseBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeNurseBttnActionPerformed(evt);
            }
        });

        tblRoomPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Room Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblRoomPatient);

        lblRoomPatient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomPatient.setText("Room - Patient Table");

        selectPatientRoomTableBttn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        selectPatientRoomTableBttn.setText("SELECT");
        selectPatientRoomTableBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPatientRoomTableBttnActionPerformed(evt);
            }
        });

        txtSelectId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSelectIdActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("ID");

        logOutBttn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logOutBttn.setText("LOG OUT");
        logOutBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBttnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblRoomPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(txtSelectId, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectPatientRoomTableBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtRemoveID, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(removePatientBttn))
                                    .addComponent(lblRemovePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPatientFirstName)
                                            .addComponent(txtPatientLastName)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPatientID)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addPatientBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboDoctor, 0, 166, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(60, 60, 60)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(comboNurse, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createSequentialGroup()
                                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                            .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(checkFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(checkMale, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                                .addComponent(radioBloodTypeAB, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(radioBloodTypeA, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(radioBloodTypeO)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(radioBloodTypeB, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                                    .addGap(166, 166, 166)
                                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(addDoctorBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtDoctorNurseFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(addNurseBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGap(21, 21, 21)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(txtDoctorNurseLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(removeNurseBttn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(removeDoctorBttn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(comboBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(comboBirthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(comboBirthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(showPatientInformationBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addComponent(lblDoctorNurse, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(47, 47, 47)))))
                                .addGap(0, 33, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(logOutBttn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel14)
                        .addComponent(jLabel15))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPatientFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(radioBloodTypeAB)
                        .addComponent(radioBloodTypeA)
                        .addComponent(radioBloodTypeO)
                        .addComponent(radioBloodTypeB))
                    .addComponent(txtDoctorNurseLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDoctorNurseFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkFemale)
                            .addComponent(checkMale)
                            .addComponent(addDoctorBttn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel13)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(removeDoctorBttn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addNurseBttn)
                            .addComponent(removeNurseBttn))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBirthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBirthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDoctorNurse)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboNurse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addPatientBttn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showPatientInformationBttn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRemoveID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(removePatientBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(3, 3, 3)
                                .addComponent(lblRemovePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRoomPatient)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSelectId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectPatientRoomTableBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(logOutBttn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPatientBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientBttnActionPerformed
        if (txtPatientFirstName.getText().length() > 0 && txtPatientLastName.getText().length() > 0 && txtPatientID.getText().length() > 0 && isBloodTypeSelected() == true && isGenderSelected() == true) {
            boolean exist = false;
            if (db.patientList.size() > 0) {
                for (Patient p : db.patientList) {
                    if (p.getiD().equals(txtPatientID.getText())) {
                        exist = true;
                        break;
                    }
                }
            }

            if (!exist) {
                boolean available = false;
                int index = 0;
                for (Room r : db.rooms) {
                    if (r.getPatient() == null) {
                        available = true;
                        index = db.rooms.indexOf(r);
                        break;
                    }
                }
                if (available) {
                    int rn = 0;
                    Patient p = new Patient(txtPatientFirstName.getText(), txtPatientLastName.getText(), txtPatientID.getText(), getRadioButtonText(), getCheckButtonText(), comboBirthDay.getSelectedItem() + "." + comboBirthMonth.getSelectedItem() + "." + comboBirthYear.getSelectedItem(), db.assignDoctor(comboDoctor.getSelectedItem().toString()), assignNurse());
                    db.patientList.add(p);
                    db.rooms.get(index).setPatient(p);
                    EntityManagerFactory emf = Persistence.createEntityManagerFactory("com.mycompany_PatientRoomReservation_jar_1.0-SNAPSHOTPU");
                    EntityManager em = emf.createEntityManager();
                    em.find(Patients.class, txtPatientID.getText());
                    addPatientData();
                    updatePatientList();
                    updateRoomPatientList();
                    writeFile(txtPatientID.getText(), txtPatientFirstName.getText(), txtPatientLastName.getText());
                    jLabel2.setText("Succesfully added. The Room Number is " + (index + 1));

                } else {
                    JOptionPane.showMessageDialog(new JFrame(), "No room available.", "Dialog", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "Patient already exists.", "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Fill all the blanks.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_addPatientBttnActionPerformed

    private void checkFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkFemaleActionPerformed

    private void checkMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkMaleActionPerformed

    private void txtPatientFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientFirstNameActionPerformed

    private void txtRemoveIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRemoveIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemoveIDActionPerformed

    private void removePatientBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePatientBttnActionPerformed
        if (txtRemoveID.getText().length() > 0) {
            boolean exist = false;
            int index = 0;
            for (Patient p : db.patientList) {
                if (p.getiD().equals(txtRemoveID.getText())) {
                    exist = true;
                    index = db.patientList.indexOf(p);
                    break;
                }
            }
            if (exist) {
                int fee = 0;
                db.patientList.remove(index);
                for (Room r : db.rooms) {
                    if (r.getPatient() != null && r.getPatient().getiD().equals(txtRemoveID.getText())) {
                        fee += r.getPaymentPerDay();
                        fee += r.getPatient().getDoctor().getCharge();
                        fee += r.getPatient().getNurse().getCharge();
                        r.setPatient(null);
                        updatePatientList();
                        updateRoomPatientList();
                        try {
                            deletePatientData(con, txtDoctorNurseFirstName.getText());
                        } catch (SQLException ex) {
                            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    }
                }
                lblRemovePatient.setText("The patient is discharged. The fee is " + fee + " TL.");
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "The patient doesn't exist.", "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Please fill the blanks.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_removePatientBttnActionPerformed

    private void addDoctorBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorBttnActionPerformed
        if (txtDoctorNurseFirstName.getText().length() > 0 && txtDoctorNurseLastName.getText().length() > 0) {
            for (Doctor d : db.doctorList) {
                if (d.firstName.equals(txtDoctorNurseFirstName.getText()) && d.lastName.equals(txtDoctorNurseLastName.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Doctor with the same name already exists.", "Dialog", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            Doctor d = new Doctor(txtDoctorNurseFirstName.getText(), txtDoctorNurseLastName.getText(), 100);
            db.doctorList.add(d);
            try {
                addDoctorData(con);
            } catch (SQLException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
            lblDoctorNurse.setText("Doctor added!");
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Fill all the blanks.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }
        updateComboDoctor();

    }//GEN-LAST:event_addDoctorBttnActionPerformed

    private void removeDoctorBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDoctorBttnActionPerformed
        if (db.doctorList.size() > 0) {
            int i = 0;
            boolean exist = false;
            for (Doctor d : db.doctorList) {
                if (d.firstName.equals(txtDoctorNurseFirstName.getText()) && d.lastName.equals(txtDoctorNurseLastName.getText())) {
                    exist = true;
                    i = db.doctorList.indexOf(d);

                    break;
                }
            }
            if (exist) {
                db.doctorList.remove(i);
                updateComboDoctor();
                try {
                    deleteDoctorData(con);
                } catch (SQLException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "There is no doctor with this name.", "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "No doctors found.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeDoctorBttnActionPerformed

    private void addNurseBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNurseBttnActionPerformed
        if (txtDoctorNurseFirstName.getText().length() > 0 && txtDoctorNurseLastName.getText().length() > 0) {
            for (Nurse n : db.nurseList) {
                if (n.firstName.equals(txtDoctorNurseFirstName.getText()) && n.lastName.equals(txtDoctorNurseLastName.getText())) {
                    JOptionPane.showMessageDialog(new JFrame(), "Nurse with the same name already exists.", "Dialog", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            Nurse n = new Nurse(txtDoctorNurseFirstName.getText(), txtDoctorNurseLastName.getText(), 40);
            db.nurseList.add(n);
            try {
                addNurseData(con);
            } catch (SQLException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
            lblDoctorNurse.setText("Nurse added!");
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Fill all the blanks.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }
        updateComboNurse();
    }//GEN-LAST:event_addNurseBttnActionPerformed

    private void removeNurseBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeNurseBttnActionPerformed
        if (db.nurseList.size() > 0) {
            int i = 0;
            boolean exist = false;
            for (Nurse n : db.nurseList) {
                if (n.firstName.equals(txtDoctorNurseFirstName.getText()) && n.lastName.equals(txtDoctorNurseLastName.getText())) {
                    exist = true;
                    i = db.nurseList.indexOf(n);
                    break;
                }
            }
            if (exist) {
                db.nurseList.remove(i);
                updateComboNurse();
                try {
                    deleteNurseData(con, txtDoctorNurseFirstName.getText());
                } catch (SQLException ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "There is no nurse with this name.", "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "No nurses found.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeNurseBttnActionPerformed

    private void showPatientInformationBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPatientInformationBttnActionPerformed
        if (db.patientList.size() > 0) {
            if (listPatientList.getSelectedValue() != null) {
                for (Patient p : db.patientList) {
                    if (p.getiD().equals(listPatientList.getSelectedValue())) {
                        Information info = new Information(p, jLabel1.getText());
                        info.setVisible(true);
                        this.dispose();
                        break;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "Please select a patient ID.", "Dialog", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Patient list is empty.", "Dialog", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_showPatientInformationBttnActionPerformed

    private void txtDoctorNurseFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorNurseFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorNurseFirstNameActionPerformed

    private void comboDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDoctorActionPerformed

    private void txtSelectIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSelectIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSelectIdActionPerformed

    private void selectPatientRoomTableBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPatientRoomTableBttnActionPerformed
        if (txtSelectId != null) {
            findPatientAndRoom(txtSelectId.getText());
        }
    }//GEN-LAST:event_selectPatientRoomTableBttnActionPerformed

    private void logOutBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutBttnActionPerformed
        Start s = new Start();
        s.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutBttnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDoctorBttn;
    private javax.swing.JButton addNurseBttn;
    private javax.swing.JButton addPatientBttn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox checkFemale;
    private javax.swing.JCheckBox checkMale;
    private javax.swing.JComboBox<String> comboBirthDay;
    private javax.swing.JComboBox<String> comboBirthMonth;
    private javax.swing.JComboBox<String> comboBirthYear;
    private javax.swing.JComboBox<String> comboDoctor;
    private javax.swing.JComboBox<String> comboNurse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAddPatient;
    private javax.swing.JLabel lblDoctorNurse;
    private javax.swing.JLabel lblRemovePatient;
    private javax.swing.JLabel lblRoomPatient;
    private javax.swing.JList<String> listPatientList;
    private javax.swing.JButton logOutBttn;
    private javax.swing.JRadioButton radioBloodTypeA;
    private javax.swing.JRadioButton radioBloodTypeAB;
    private javax.swing.JRadioButton radioBloodTypeB;
    private javax.swing.JRadioButton radioBloodTypeO;
    private javax.swing.JButton removeDoctorBttn;
    private javax.swing.JButton removeNurseBttn;
    private javax.swing.JButton removePatientBttn;
    private javax.swing.JButton selectPatientRoomTableBttn;
    private javax.swing.JButton showPatientInformationBttn;
    private javax.swing.JTable tblRoomPatient;
    private javax.swing.JTextField txtDoctorNurseFirstName;
    private javax.swing.JTextField txtDoctorNurseLastName;
    private javax.swing.JTextField txtPatientFirstName;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPatientLastName;
    private javax.swing.JTextField txtRemoveID;
    private javax.swing.JTextField txtSelectId;
    // End of variables declaration//GEN-END:variables
    public void updateComboDoctor() {
        comboDoctor.removeAllItems();
        for (Doctor d : db.doctorList) {
            comboDoctor.addItem(d.firstName + " " + d.lastName);
        }
    }

    public void updateComboNurse() {
        comboNurse.removeAllItems();
        for (Nurse n : db.nurseList) {
            comboNurse.addItem(n.firstName + " " + n.lastName);
        }
    }

    public void updatePatientList() {
        DefaultListModel dl = new DefaultListModel();
        for (Patient p : db.patientList) {
            dl.addElement(p.getiD());
        }
        listPatientList.setModel(dl);
    }

    public void updateRoomPatientList() {
        DefaultTableModel dt = (DefaultTableModel) tblRoomPatient.getModel();
        dt.setRowCount(0);
        int index = 0;
        for (Patient p : db.patientList) {
            for (Room r : db.rooms) {
                if (r.getPatient() != null) {
                    if (r.getPatient().equals(p)) {
                        index++;
                        String[] fields = {p.getiD(), "Room " + index};
                        dt.addRow(fields);
                    }
                }
            }
        }
    }

    public String getRadioButtonText() {
        if (radioBloodTypeAB.isSelected()) {
            return "AB";
        } else if (radioBloodTypeO.isSelected()) {
            return "O";
        } else if (radioBloodTypeA.isSelected()) {
            return "A";
        } else if (radioBloodTypeB.isSelected()) {
            return "B";
        } else {
            return null;
        }
    }

    public String getCheckButtonText() {
        if (checkFemale.isSelected()) {
            return "Female";
        } else if (checkMale.isSelected()) {
            return "Male";
        } else {
            return null;
        }
    }

    public Doctor assignDoctor() {
        Doctor doctor = null;
        for (Doctor d : db.doctorList) {
            if ((d.getFirstName() + " " + d.getLastName()).equals(comboDoctor.getSelectedItem().toString())) {
                doctor = d;
                return doctor;
            }
        }
        return doctor;
    }

    public Nurse assignNurse() {
        Nurse nurse = null;
        for (Nurse n : db.nurseList) {
            if ((n.getFirstName() + " " + n.getLastName()).equals(comboDoctor.getSelectedItem().toString())) {
                nurse = n;
                return nurse;
            }
        }
        return nurse;
    }

    public boolean isBloodTypeSelected() {
        if (radioBloodTypeAB.isSelected()) {
            return true;
        } else if (radioBloodTypeA.isSelected()) {
            return true;
        } else if (radioBloodTypeB.isSelected()) {
            return true;
        } else if (radioBloodTypeO.isSelected()) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isGenderSelected() {
        if (checkFemale.isSelected()) {
            return true;
        } else if (checkMale.isSelected()) {
            return true;
        } else {
            return false;
        }
    }

    public void findPatientAndRoom(String id) {
        DefaultTableModel model = (DefaultTableModel) tblRoomPatient.getModel();
        int rowCount = model.getRowCount();
        int idColumnIndex = -1;
        int roomNumberColumnIndex = -1;

        for (int i = 0; i < model.getColumnCount(); i++) {
            if (model.getColumnName(i).equals("ID")) {
                idColumnIndex = i;
                updateRoomPatientList();
            } else if (model.getColumnName(i).equals("Room Number")) {
                roomNumberColumnIndex = i;
            }
        }

    }

    public void addDoctorData(Connection c) throws SQLException {

        String sqlInsert = "INSERT INTO DOCTORS "
                + "(DOCTOR_FIRST_NAME,DOCTOR_LAST_NAME) "
                + " VALUES (?,?)";
        try ( PreparedStatement psInsert = c.prepareStatement(sqlInsert)) {
            psInsert.setString(1, txtDoctorNurseFirstName.getText());
            psInsert.setString(2, txtDoctorNurseLastName.getText());
            psInsert.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void addNurseData(Connection c) throws SQLException {

        String sqlInsert = "INSERT INTO NURSES "
                + "(NURSE_FIRST_NAME,NURSE_LAST_NAME) "
                + " VALUES (?,?)";
        try ( PreparedStatement psInsert = c.prepareStatement(sqlInsert)) {
            psInsert.setString(1, txtDoctorNurseFirstName.getText());
            psInsert.setString(2, txtDoctorNurseLastName.getText());
            psInsert.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void addPatientData() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("com.mycompany_PatientRoomReservation_jar_1.0-SNAPSHOTPU");
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            Patients p = new Patients();
            p.setPatientId(txtPatientID.getText());
            p.setPatientFirstName(txtPatientFirstName.getText());
            p.setPatientLastName(txtPatientLastName.getText());
            p.setPatientGender(getCheckButtonText());
            p.setPatientBloodType(getRadioButtonText());
            p.setPatientBirthdate(comboBirthDay.getSelectedItem() + "." + comboBirthMonth.getSelectedItem() + "." + comboBirthYear.getSelectedItem());
            p.setPatientDoctor(comboDoctor.getSelectedItem().toString());
            p.setPatientNurse(comboNurse.getSelectedItem().toString());
            em.persist(p);
            em.getTransaction().commit();
        } catch (Exception e) {
            em.getTransaction().rollback();
        } finally {
            em.close();
            emf.close();
        }
    }

    public void deletePatientData(Connection c, String doctor) throws SQLException {
        String sqlDelete = "DELETE FROM PATIENTS WHERE PATIENT_ID =?";
        try {
            PreparedStatement psDelete = c.prepareStatement(sqlDelete);

            psDelete.setString(1, doctor);
            psDelete.executeUpdate();
            psDelete.close();
            c.close();

        } catch (SQLException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void deleteDoctorData(Connection c) throws SQLException {
        String sqlDelete = "DELETE FROM DOCTORS WHERE DOCTOR_FIRST_NAME =? ";
        try {
            PreparedStatement psDelete = c.prepareStatement(sqlDelete);

            psDelete.setString(1, txtDoctorNurseFirstName.getText());
            psDelete.executeUpdate();
            psDelete.close();
            c.close();

        } catch (SQLException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void deleteNurseData(Connection c, String nurse) throws SQLException {
        String sqlDelete = "DELETE FROM Nurses WHERE NURSE_FIRST_NAME =? ";
        try {
            PreparedStatement psDelete = c.prepareStatement(sqlDelete);

            psDelete.setString(1, nurse);
            psDelete.executeUpdate();
            psDelete.close();
            c.close();

        } catch (SQLException ex) {
            Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void writeFile(String id, String firstName, String lastName) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\patientreservation\\data.txt", true));
            writer.newLine();
            writer.write(id + " " + firstName + " " + lastName);
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
